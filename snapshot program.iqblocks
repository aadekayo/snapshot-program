{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"_2.^beQjx|FGt38A,8(E\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">myVariable</variable></variables><block type=\"iq_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"70\" y=\"-10\"><next><block type=\"iq_looks_print_new\" id=\"k^%h(*RoU({{h-T^LnO?\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"jvjP-aD|0J?(bR;*o/rs\"><field name=\"TEXT\">474F</field></shadow></value><next><block type=\"iq_drivetrain_set_drive_velocity\" id=\"Rp.:c-XS42AL]M@iOz/,\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"#B+_N%p.0xFLsNrIQxi,\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_drivetrain_set_turn_velocity\" id=\"Faw3tsH^[QBGp^2hRgsG\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"1?3GgX_WMiLWU=F%(sLk\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_velocity\" id=\"3Fu,CUpIc{2^1M6DEb%s\"><field name=\"MOTOR\">shooty</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"6K-7XbTVdz(k]2ERXuwh\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_torque\" id=\"Z3gq#Bs|$l+Y{f_Io3)g\"><field name=\"MOTOR\">shooty</field><value name=\"TORQUE\"><shadow type=\"math_number\" id=\"!C_dlt-n,cG:X%ZuA6VX\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_velocity\" id=\"!.Xg)${*Tb652+WSb$#,\"><field name=\"MOTOR\">blupy</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"zOIWu!f-|tVUzk`eVZcf\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_torque\" id=\"GG2%X@aSFB[nKD?3Xl_a\"><field name=\"MOTOR\">blupy</field><value name=\"TORQUE\"><shadow type=\"math_number\" id=\"o$F!iB%E%ICg0-1|B:je\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_torque\" id=\",:fs`Z3eyP{X9$8**-ts\"><field name=\"MOTOR\">shooty</field><value name=\"TORQUE\"><shadow type=\"math_number\" id=\"oErg2~Cp!yU7RT)Ymp@C\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_velocity\" id=\";mCP%Iq~Kex`3YKOYr#4\"><field name=\"MOTOR\">purpy</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"z/IvJj]/dS~){o4DOs.w\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_torque\" id=\"|I)CYFhG-P/D,73i5%E~\"><field name=\"MOTOR\">purpy</field><value name=\"TORQUE\"><shadow type=\"math_number\" id=\"pskvqS}=a8yXrbc2Kd6!\"><field name=\"NUM\">100</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></xml>","rconfig":[{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"blupy","leftDir":"false","right":"purpy","rightDir":"false","e":"shooty","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"tank"}},{"port":[6,4,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"}},{"port":[5],"name":"shooty","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"}},{"port":[3],"name":"blupy","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"}},{"port":[2],"name":"purpy","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"}}],"slot":0,"platform":"IQ","sdkVersion":"20220726.10.00.00","appVersion":"2.4.4","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ncontroller Controller = controller();\nmotor LeftDriveSmart = motor(PORT6, 1, false);\nmotor RightDriveSmart = motor(PORT4, 1, true);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 200, 173, 76, mm, 1);\nmotor shooty = motor(PORT5, false);\nmotor blupy = motor(PORT3, false);\nmotor purpy = motor(PORT2, false);\n\n\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool ControllerLeftShoulderControlMotorsStopped = true;\nbool ControllerRightShoulderControlMotorsStopped = true;\nbool eButtonsControlMotorsStopped = true;\nbool DrivetrainLNeedsToBeStopped_Controller = true;\nbool DrivetrainRNeedsToBeStopped_Controller = true;\n\n// define a task that will handle monitoring inputs from Controller\nint rc_auto_loop_function_Controller() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = AxisA\n      // right = AxisD\n      int drivetrainLeftSideSpeed = Controller.AxisA.position();\n      int drivetrainRightSideSpeed = Controller.AxisD.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonLUp/ButtonLDown status to control blupy\n      if (Controller.ButtonLUp.pressing()) {\n        blupy.spin(forward);\n        ControllerLeftShoulderControlMotorsStopped = false;\n      } else if (Controller.ButtonLDown.pressing()) {\n        blupy.spin(reverse);\n        ControllerLeftShoulderControlMotorsStopped = false;\n      } else if (!ControllerLeftShoulderControlMotorsStopped) {\n        blupy.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        ControllerLeftShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonRUp/ButtonRDown status to control purpy\n      if (Controller.ButtonRUp.pressing()) {\n        purpy.spin(forward);\n        ControllerRightShoulderControlMotorsStopped = false;\n      } else if (Controller.ButtonRDown.pressing()) {\n        purpy.spin(reverse);\n        ControllerRightShoulderControlMotorsStopped = false;\n      } else if (!ControllerRightShoulderControlMotorsStopped) {\n        purpy.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        ControllerRightShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonEUp/ButtonEDown status to control shooty\n      if (Controller.ButtonEUp.pressing()) {\n        shooty.spin(forward);\n        eButtonsControlMotorsStopped = false;\n      } else if (Controller.ButtonEDown.pressing()) {\n        shooty.spin(reverse);\n        eButtonsControlMotorsStopped = false;\n      } else if (!eButtonsControlMotorsStopped) {\n        shooty.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        eButtonsControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller(rc_auto_loop_function_Controller);\n\n// Include the IQ Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint Brain_precision = 0, Console_precision = 0;\n\nfloat myVariable;\n\n// \"when started\" hat block\nint whenStarted1() {\n  Brain.Screen.print(\"474F\");\n  Drivetrain.setDriveVelocity(100.0, percent);\n  Drivetrain.setTurnVelocity(100.0, percent);\n  shooty.setVelocity(100.0, percent);\n  shooty.setMaxTorque(100.0, percent);\n  blupy.setVelocity(100.0, percent);\n  blupy.setMaxTorque(100.0, percent);\n  shooty.setMaxTorque(100.0, percent);\n  purpy.setVelocity(100.0, percent);\n  purpy.setMaxTorque(100.0, percent);\n  return 0;\n}\n\n\nint main() {\n  whenStarted1();\n}","target":"Physical"}