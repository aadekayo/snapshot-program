{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"_2.^beQjx|FGt38A,8(E\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">myVariable</variable></variables><block type=\"iq_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"70\" y=\"-10\"><next><block type=\"iq_looks_print_new\" id=\"k^%h(*RoU({{h-T^LnO?\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"jvjP-aD|0J?(bR;*o/rs\"><field name=\"TEXT\">474F</field></shadow></value><next><block type=\"iq_drivetrain_set_drive_velocity\" id=\"Rp.:c-XS42AL]M@iOz/,\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"#B+_N%p.0xFLsNrIQxi,\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_drivetrain_set_turn_velocity\" id=\"Faw3tsH^[QBGp^2hRgsG\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"1?3GgX_WMiLWU=F%(sLk\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_velocity\" id=\"t1C8@pUf(j89.:nb:.(w\"><field name=\"MOTOR\">spinnytimmy</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"Xx**#-Q-u49-!CZH^j)W\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_torque\" id=\"=*gr:oVLpTg{Y@KHQ(l)\"><field name=\"MOTOR\">spinnytimmy</field><value name=\"TORQUE\"><shadow type=\"math_number\" id=\"3tnR.)pgY+?];ndTo8U~\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_velocity\" id=\"0+v07[*gw_:Sy-rF[xI=\"><field name=\"MOTOR\">slideyiidy</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"I+iohHIYKKTlQ-$zSc/o\"><field name=\"NUM\">56</field></shadow></value><next><block type=\"iq_motion_set_motor_torque\" id=\":GY@J1Z_3fg=mUmRfLvh\"><field name=\"MOTOR\">slideyiidy</field><value name=\"TORQUE\"><shadow type=\"math_number\" id=\"7o$YI%1*lJ%b5GI1}4qq\"><field name=\"NUM\">56</field></shadow></value><next><block type=\"iq_motion_set_motor_torque\" id=\"E,dW0*|fvqEWlKH2[O%j\"><field name=\"MOTOR\">blueygooey</field><value name=\"TORQUE\"><shadow type=\"math_number\" id=\"}f3?7?N{MkuW5~Zh*GTQ\"><field name=\"NUM\">67</field></shadow></value><next><block type=\"iq_motion_set_motor_velocity\" id=\"3h2!?3bc##~V/#~PuKT9\"><field name=\"MOTOR\">blueygooey</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"}sIGmgJS!n4_iCwO5raO\"><field name=\"NUM\">67</field></shadow></value><next><block type=\"iq_looks_set_touchled_color\" id=\"USm]s3v%Ec`YyYZt07o4\"><field name=\"TOUCHLED\">cool</field><value name=\"COLOR\"><shadow type=\"iq_looks_colorlist\" id=\"GfHuwMs=2hoVaR{#KCin\"><field name=\"COLOR\">red_orange</field></shadow></value><next><block type=\"iq_looks_set_touchled_color\" id=\"(p@16}VFIUlBs!pRCl!4\"><field name=\"TOUCHLED\">kool</field><value name=\"COLOR\"><shadow type=\"iq_looks_colorlist\" id=\"2CiMVHbKoHv`,k0r.vQe\"><field name=\"COLOR\">blue_violet</field></shadow></value><next><block type=\"iq_motion_spin_for\" id=\"f^tVk^A2dv2wkbplu9#1\"><field name=\"MOTOR\">blueygooey</field><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"JaO@?Y41#xCdXG(vC|eF\"><field name=\"NUM\">90</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block><block type=\"iq_events_when_controller_button\" id=\"fu9bMv9r9|q66PD3%4jJ\" x=\"610\" y=\"10\"><field name=\"BUTTON\">ButtonRUp</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_motion_spin\" id=\"6TXrsQT]%I}OSpn~TjQE\"><field name=\"MOTOR\">spinnytimmy</field><field name=\"DIRECTION\">rev</field></block></next></block><block type=\"iq_events_when_controller_button\" id=\"$z=dWWs=g+IU!+cE3EYX\" x=\"610\" y=\"150\"><field name=\"BUTTON\">ButtonRDown</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_motion_spin\" id=\"R5F$0$N,TEm,]jAjC,,X\"><field name=\"MOTOR\">spinnytimmy</field><field name=\"DIRECTION\">fwd</field></block></next></block></xml>","rconfig":[{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"slideyiidy","leftDir":"false","right":"","rightDir":"false","e":"blueygooey","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"tank"},"triportSourcePort":22},{"port":[8,7,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[9],"name":"cool","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[1],"name":"kool","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[12],"name":"spinnytimmy","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[11],"name":"slideyiidy","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[10],"name":"blueygooey","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20220726.10.00.00","appVersion":"2.4.4","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ncontroller Controller = controller();\nmotor LeftDriveSmart = motor(PORT8, 1, false);\nmotor RightDriveSmart = motor(PORT7, 1, true);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 200, 173, 76, mm, 1);\ntouchled cool = touchled(PORT9);\ntouchled kool = touchled(PORT1);\nmotor spinnytimmy = motor(PORT12, false);\nmotor slideyiidy = motor(PORT11, false);\nmotor blueygooey = motor(PORT10, false);\n\n\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool ControllerLeftShoulderControlMotorsStopped = true;\nbool eButtonsControlMotorsStopped = true;\nbool DrivetrainLNeedsToBeStopped_Controller = true;\nbool DrivetrainRNeedsToBeStopped_Controller = true;\n\n// define a task that will handle monitoring inputs from Controller\nint rc_auto_loop_function_Controller() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = AxisA\n      // right = AxisD\n      int drivetrainLeftSideSpeed = Controller.AxisA.position();\n      int drivetrainRightSideSpeed = Controller.AxisD.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonLUp/ButtonLDown status to control slideyiidy\n      if (Controller.ButtonLUp.pressing()) {\n        slideyiidy.spin(forward);\n        ControllerLeftShoulderControlMotorsStopped = false;\n      } else if (Controller.ButtonLDown.pressing()) {\n        slideyiidy.spin(reverse);\n        ControllerLeftShoulderControlMotorsStopped = false;\n      } else if (!ControllerLeftShoulderControlMotorsStopped) {\n        slideyiidy.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        ControllerLeftShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonEUp/ButtonEDown status to control blueygooey\n      if (Controller.ButtonEUp.pressing()) {\n        blueygooey.spin(forward);\n        eButtonsControlMotorsStopped = false;\n      } else if (Controller.ButtonEDown.pressing()) {\n        blueygooey.spin(reverse);\n        eButtonsControlMotorsStopped = false;\n      } else if (!eButtonsControlMotorsStopped) {\n        blueygooey.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        eButtonsControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller(rc_auto_loop_function_Controller);\n\n// Include the IQ Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint Brain_precision = 0, Console_precision = 0;\n\nfloat myVariable;\n\n// \"when started\" hat block\nint whenStarted1() {\n  Brain.Screen.print(\"474F\");\n  Drivetrain.setDriveVelocity(100.0, percent);\n  Drivetrain.setTurnVelocity(100.0, percent);\n  spinnytimmy.setVelocity(100.0, percent);\n  spinnytimmy.setMaxTorque(100.0, percent);\n  slideyiidy.setVelocity(56.0, percent);\n  slideyiidy.setMaxTorque(56.0, percent);\n  blueygooey.setMaxTorque(67.0, percent);\n  blueygooey.setVelocity(67.0, percent);\n  cool.setColor(red_orange);\n  kool.setColor(blue_violet);\n  blueygooey.spinFor(reverse, 90.0, degrees);\n  return 0;\n}\n\n// \"when Controller ButtonRUp pressed\" hat block\nvoid onevent_ControllerButtonRUp_pressed_0() {\n  spinnytimmy.spin(reverse);\n}\n\n// \"when Controller ButtonRDown pressed\" hat block\nvoid onevent_ControllerButtonRDown_pressed_0() {\n  spinnytimmy.spin(forward);\n}\n\n\nint main() {\n  // register event handlers\n  Controller.ButtonRUp.pressed(onevent_ControllerButtonRUp_pressed_0);\n  Controller.ButtonRDown.pressed(onevent_ControllerButtonRDown_pressed_0);\n\n  wait(15, msec);\n  whenStarted1();\n}","target":"Physical"}